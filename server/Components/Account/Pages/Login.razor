@page "/login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using bartr.Data
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Logging

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Task Exchange | Log in</PageTitle>

<section class="min-h-screen" style="display: flex;justify-items: center;align-items: center">
    @* <StatusMessage Message="@errorMessage"/> *@
    <EditForm 
        Model="Input"
        method="post"
        OnValidSubmit="LoginUser"
        FormName="login"
        
    >
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger" role="alert"/>
        <div class="mb-3">
            <label for="email" class="form-label block">Email</label>
            <InputText

                @bind-Value="Input.Email"
                class="form-control block"
                autocomplete="username"
                aria-required="true"
                placeholder="name@example.com"/>

            <ValidationMessage For="() => Input.Email" class="text-danger"/>
        </div>
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password"/>
            <label for="password" class="form-label">Password</label>
            <ValidationMessage For="() => Input.Password" class="text-danger"/>
        </div>
        <div>
            <button type="submit" class="w-100 bg-red-500">Log in</button>
        </div>
            
    </EditForm>
</section>


@code {
    private string? errorMessage;
    // [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    public sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}